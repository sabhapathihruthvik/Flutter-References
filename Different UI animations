import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'UI Animation Showcase',
      home: AnimationShowcase(),
    );
  }
}

class AnimationShowcase extends StatelessWidget {
  const AnimationShowcase({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("UI Animation Showcase")),
      body: ListView(
        children: const [
          Section(
            title: "Carousel/Slider",
            widget: CarouselSlider(),
          ),
          Section(
            title: "Parallax Scrolling",
            widget: ParallaxScroll(),
          ),
          Section(
            title: "PageView Snap Effect",
            widget: SnapPageView(),
          ),
          Section(
            title: "Card Flip Animation",
            widget: CardFlip(),
          ),
          Section(
            title: "Expanding Cards (Swipe Animations)",
            widget: ExpandingCards(),
          ),
          Section(
            title: "Bottom Sheet Expander",
            widget: BottomSheetExpander(),
          ),
          Section(
            title: "Floating Action Button Explosion",
            widget: FABExplosion(),
          ),
          Section(
            title: "Nested Scroll Animation",
            widget: NestedScroll(),
          ),
          Section(
            title: "Staggered Animation for Cards/Grid",
            widget: StaggeredAnimation(),
          ),
        ],
      ),
    );
  }
}

class Section extends StatelessWidget {
  final String title;
  final Widget widget;

  const Section({required this.title, required this.widget, super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(title, style: Theme.of(context).textTheme.titleLarge),
        ),
        widget,
      ],
    );
  }
}

class BottomSheetExpander extends StatelessWidget {
  const BottomSheetExpander({super.key});

  void _showBottomSheet(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return AnimatedPadding(
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
          padding: MediaQuery.of(context).viewInsets,
          child: Container(
            height: MediaQuery.of(context).size.height * 0.75,
            color: Colors.white,
            child: const Center(
              child:
                  Text("Expanded Bottom Sheet", style: TextStyle(fontSize: 20)),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: ElevatedButton(
        onPressed: () => _showBottomSheet(context),
        child: const Text("Show Bottom Sheet"),
      ),
    );
  }
}

class FABExplosion extends StatefulWidget {
  const FABExplosion({super.key});

  @override
  State<FABExplosion> createState() => _FABExplosionState();
}

class NestedScroll extends StatelessWidget {
  const NestedScroll({super.key});

  @override
  Widget build(BuildContext context) {
    return NestedScrollView(
      headerSliverBuilder: (context, innerBoxIsScrolled) {
        return [
          const SliverAppBar(
            expandedHeight: 200,
            floating: false,
            pinned: true,
            flexibleSpace: FlexibleSpaceBar(
              title: Text("Nested Scroll Animation"),
              background: FlutterLogo(),
            ),
          ),
        ];
      },
      body: ListView.builder(
        padding: const EdgeInsets.all(8.0),
        itemCount: 20,
        itemBuilder: (context, index) {
          return Card(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text("Item $index"),
            ),
          );
        },
      ),
    );
  }
}

class _FABExplosionState extends State<FABExplosion>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );
    _animation = Tween<double>(begin: 1.0, end: 100).animate(_controller);
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Stack(
        children: [
          FloatingActionButton(
            onPressed: () {
              _controller.forward(from: 0.0);
            },
            child: const Icon(Icons.add),
          ),
          AnimatedBuilder(
            animation: _controller,
            builder: (context, child) => Container(
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.blue.withOpacity(0.5),
              ),
              height: _animation.value * 10,
              width: _animation.value * 10,
            ),
          )
        ],
      ),
    );
  }
}

class ExpandingCards extends StatefulWidget {
  const ExpandingCards({super.key});

  @override
  State<ExpandingCards> createState() => _ExpandingCardsState();
}

class _ExpandingCardsState extends State<ExpandingCards> {
  double _currentSize = 0.8;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 150,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: 5,
        itemBuilder: (context, index) {
          return GestureDetector(
            onTap: () {
              setState(() => _currentSize = _currentSize == 0.8 ? 1.0 : 0.8);
            },
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              width: 150,
              margin: const EdgeInsets.symmetric(horizontal: 10),
              height: _currentSize == 1.0 ? 180 : 150,
              decoration: BoxDecoration(
                color: Colors.amber,
                borderRadius: BorderRadius.circular(10),
              ),
              child: Center(
                child:
                    Text("Card $index", style: const TextStyle(fontSize: 18)),
              ),
            ),
          );
        },
      ),
    );
  }
}

// Carousel/Slider
class CarouselSlider extends StatelessWidget {
  const CarouselSlider({super.key});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 200,
      child: PageView(
        children: List.generate(5, (index) {
          return Container(
            margin: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: Colors.blueAccent,
              borderRadius: BorderRadius.circular(10),
            ),
            alignment: Alignment.center,
            child: Text("Slide ${index + 1}",
                style: const TextStyle(color: Colors.white, fontSize: 24)),
          );
        }),
      ),
    );
  }
}

// Parallax Scrolling
class ParallaxScroll extends StatelessWidget {
  const ParallaxScroll({super.key});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 200,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemBuilder: (context, index) {
          return Stack(
            children: [
              Image.network(
                "https://picsum.photos/800/400?random=$index",
                fit: BoxFit.cover,
                height: 200,
                width: 200,
              ),
              Positioned.fill(
                child: Align(
                  alignment: Alignment.bottomCenter,
                  child: Container(
                    color: Colors.black.withOpacity(0.5),
                    padding: const EdgeInsets.all(10),
                    child: Text(
                      "Item $index",
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}

// PageView Snap Effect
class SnapPageView extends StatelessWidget {
  const SnapPageView({super.key});

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 200,
      child: PageView.builder(
        controller: PageController(viewportFraction: 0.8),
        itemBuilder: (context, index) {
          return Transform.scale(
            scale: 0.9,
            child: Card(
              color: Colors.redAccent,
              margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 20),
              child: Center(
                child: Text("Page $index",
                    style: const TextStyle(color: Colors.white, fontSize: 24)),
              ),
            ),
          );
        },
      ),
    );
  }
}

// Card Flip Animation
class CardFlip extends StatefulWidget {
  const CardFlip({super.key});

  @override
  State<CardFlip> createState() => _CardFlipState();
}

class StaggeredAnimation extends StatefulWidget {
  const StaggeredAnimation({super.key});

  @override
  State<StaggeredAnimation> createState() => _StaggeredAnimationState();
}

class _StaggeredAnimationState extends State<StaggeredAnimation>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      padding: const EdgeInsets.all(8.0),
      gridDelegate:
          const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),
      itemCount: 6,
      itemBuilder: (context, index) {
        return ScaleTransition(
          scale: CurvedAnimation(
            parent: _controller,
            curve: Interval((index * 0.2), 1.0, curve: Curves.easeOut),
          ),
          child: Card(
            color: Colors.teal,
            margin: const EdgeInsets.all(8.0),
            child: Center(
              child: Text(
                "Card $index",
                style: const TextStyle(color: Colors.white, fontSize: 18),
              ),
            ),
          ),
        );
      },
    );
  }
}

class AnimatedDrawer extends StatelessWidget {
  const AnimatedDrawer({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Drawer Animation")),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(color: Colors.blue),
              child: Text(
                "Header",
                style: TextStyle(color: Colors.white, fontSize: 24),
              ),
            ),
            ListTile(
              title: const Text("Item 1"),
              onTap: () => Navigator.pop(context),
            ),
            ListTile(
              title: const Text("Item 2"),
              onTap: () => Navigator.pop(context),
            ),
          ],
        ),
      ),
      body: const Center(child: Text("Slide-out menu in action!")),
    );
  }
}

class _CardFlipState extends State<CardFlip>
    with SingleTickerProviderStateMixin {
  bool _isFlipped = false;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => setState(() {
        _isFlipped = !_isFlipped;
      }),
      child: AnimatedSwitcher(
        duration: const Duration(seconds: 1),
        child: _isFlipped
            ? Container(
                key: const ValueKey("Back"),
                color: Colors.purple,
                height: 100,
                width: double.infinity,
                alignment: Alignment.center,
                child:
                    const Text("Back", style: TextStyle(color: Colors.white)),
              )
            : Container(
                key: const ValueKey("Front"),
                color: Colors.green,
                height: 100,
                width: double.infinity,
                alignment: Alignment.center,
                child:
                    const Text("Front", style: TextStyle(color: Colors.white)),
              ),
      ),
    );
  }
}

// Staggered Animation for Cards/Grid
// Placeholder for brevity...
