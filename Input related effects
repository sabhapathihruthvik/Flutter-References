import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: InputEffectsPage(),
    );
  }
}

class InputEffectsPage extends StatefulWidget {
  const InputEffectsPage({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _InputEffectsPageState createState() => _InputEffectsPageState();
}

class _InputEffectsPageState extends State<InputEffectsPage> {
  final TextEditingController _controller = TextEditingController();
  bool _isPasswordVisible = false;
  bool _isFocused = false;
  bool _isError = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Input Effects Showcase")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            // TextField Highlight/Glow Effect
            Focus(
              onFocusChange: (hasFocus) {
                setState(() {
                  _isFocused = hasFocus;
                });
              },
              child: TextField(
                controller: _controller,
                decoration: InputDecoration(
                  labelText: "Highlight TextField",
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(
                      color: _isFocused ? Colors.blue : Colors.grey,
                      width: 2.0,
                    ),
                  ),
                  enabledBorder: const OutlineInputBorder(
                    borderSide: BorderSide(
                      color: Colors.grey,
                      width: 2.0,
                    ),
                  ),
                  errorText: _isError ? 'Invalid input' : null,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Dynamic Error Tooltip
            TextField(
              decoration: InputDecoration(
                labelText: "Input with Error Tooltip",
                errorText: _isError ? 'Invalid input' : null,
              ),
              onChanged: (value) {
                setState(() {
                  _isError = value.isEmpty;
                });
              },
            ),
            const SizedBox(height: 20),

            // Press-and-Hold Ripple Effect
            GestureDetector(
              onLongPress: () {
                // Just changing the state when long pressed for visual feedback
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                  content: Text("Ripple Effect Pressed!"),
                ));
              },
              child: Material(
                color: Colors.blue,
                borderRadius: BorderRadius.circular(10.0),
                child: InkWell(
                  onTap: () {},
                  splashColor: Colors.white.withOpacity(0.5),
                  borderRadius: BorderRadius.circular(10.0),
                  child: const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                    child: Text(
                      "Press and Hold",
                      style: TextStyle(color: Colors.white, fontSize: 16),
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Color Change Animation on Focus
            TextField(
              decoration: InputDecoration(
                labelText: "Color Change on Focus",
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(
                    color: _isFocused ? Colors.green : Colors.red,
                    width: 2.0,
                  ),
                ),
              ),
              onTap: () => setState(() => _isFocused = true),
              onEditingComplete: () => setState(() => _isFocused = false),
            ),
            const SizedBox(height: 20),

            // Animated Password Eye Toggle
            TextField(
              obscureText: !_isPasswordVisible,
              decoration: InputDecoration(
                labelText: "Password",
                suffixIcon: GestureDetector(
                  onTap: () {
                    setState(() {
                      _isPasswordVisible = !_isPasswordVisible;
                    });
                  },
                  child: AnimatedSwitcher(
                    duration: const Duration(milliseconds: 200),
                    child: Icon(
                      _isPasswordVisible
                          ? Icons.visibility
                          : Icons.visibility_off,
                      key: ValueKey<bool>(_isPasswordVisible),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
