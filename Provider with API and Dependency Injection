import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

void main() {
  runApp(
    MultiProvider(
      providers: [
        Provider(create: (_) => ApiService()), // API Service
        ChangeNotifierProvider(
            create: (context) => PostProvider(context.read<ApiService>())),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: PostScreen(),
    );
  }
}

class PostScreen extends StatelessWidget {
  const PostScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final postProvider = Provider.of<PostProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text("Provider API Demo")),
      body: Center(
        child: postProvider.isLoading
            ? const CircleAvatar()
            : postProvider.errorMessage.isNotEmpty
                ? Text("Error: ${postProvider.errorMessage}")
                : ListView.builder(
                    itemCount: postProvider.posts.length,
                    itemBuilder: (context, index) {
                      final post = postProvider.posts[index];
                      return ListTile(
                        title: Text(post['title'],
                            style:
                                const TextStyle(fontWeight: FontWeight.bold)),
                        subtitle: Text(post['body']),
                      );
                    },
                  ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: postProvider.fetchPosts,
        child: const Icon(Icons.refresh),
      ),
    );
  }
}

class ApiService {
  final String apiUrl = "https://jsonplaceholder.typicode.com/posts";

  Future<List<dynamic>> fetchPosts() async {
    final response = await http.get(Uri.parse(apiUrl));
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception("Failed to load posts");
    }
  }
}

class PostProvider with ChangeNotifier {
  final ApiService apiService;

  PostProvider(this.apiService); // Injecting dependency

  List<dynamic> _posts = [];
  bool _isLoading = false;
  String _errorMessage = '';

  List<dynamic> get posts => _posts;
  bool get isLoading => _isLoading;
  String get errorMessage => _errorMessage;

  Future<void> fetchPosts() async {
    _isLoading = true;
    _errorMessage = '';
    notifyListeners();

    try {
      _posts = await apiService.fetchPosts();
    } catch (e) {
      _errorMessage = e.toString();
    }

    _isLoading = false;
    notifyListeners();
  }
}
