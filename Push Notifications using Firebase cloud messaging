import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  FirebaseNotificationService().initialize(); // Initialize FCM
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Firebase Notifications Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String? token;

  @override
  void initState() {
    super.initState();
    _loadToken();
  }

  Future<void> _loadToken() async {
    final fcmToken = await FirebaseNotificationService().getToken();
    setState(() {
      token = fcmToken;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Home Screen")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              "Welcome to Firebase Notification Demo!",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Text("Your FCM Token: $token"),
            const SizedBox(height: 16),
            const Text(
              "Copy this token to send a push notification via the Firebase Console or API.",
            ),
          ],
        ),
      ),
    );
  }
}

class NotificationScreen extends StatelessWidget {
  final String messageTitle;
  final String messageBody;

  const NotificationScreen({
    super.key,
    required this.messageTitle,
    required this.messageBody,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Notification Details")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              "Notification Clicked!",
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Text("Title: $messageTitle"),
            const SizedBox(height: 8),
            Text("Body: $messageBody"),
          ],
        ),
      ),
    );
  }
}

class FirebaseNotificationService {
  final FirebaseMessaging _messaging = FirebaseMessaging.instance;

  void initialize() async {
    // Request permission for iOS devices
    NotificationSettings settings = await _messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );
    print('User granted permission: ${settings.authorizationStatus}');

    // Handle foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('Foreground message received: ${message.notification?.title}');
      // Show custom in-app alert or dialog
      _showInAppMessage(
        title: message.notification?.title,
        body: message.notification?.body,
      );
    });

    // Handle notification taps when the app is in the background
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('Notification tapped (background): ${message.data}');
      _navigateToPage(message);
    });

    // For messages when the app is completely terminated
    RemoteMessage? initialMessage =
        await FirebaseMessaging.instance.getInitialMessage();
    if (initialMessage != null) {
      _navigateToPage(initialMessage);
    }
  }

  Future<String?> getToken() async {
    final token = await _messaging.getToken();
    print("FCM Token: $token");
    return token;
  }

  void _showInAppMessage({String? title, String? body}) {
    // You can display a SnackBar, Dialog, or custom UI here
    debugPrint('In-App Message: $title - $body');
  }

  void _navigateToPage(RemoteMessage message) {
    final context = navigatorKey.currentState?.overlay?.context;
    if (context != null) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => NotificationScreen(
            messageTitle: message.notification?.title ?? "No Title",
            messageBody: message.notification?.body ?? "No Body",
          ),
        ),
      );
    }
  }
}

// Global navigator key
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
